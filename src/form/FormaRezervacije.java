/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import domen.Klijent;
import domen.MedjuStanica;
import domen.Polazak;
import domen.Rezervacija;
import domen.Stanica;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import kontroler.Kontroler;
import modeli.tabela.ModelTabelePolasci;
import modeli.tabela.ModelTabeleRezervacija;
import sat.Sat;

/**
 *
 * @author sleza
 */
public final class FormaRezervacije extends javax.swing.JFrame {

    private Klijent k;
    Sat s = new Sat();
    SimpleDateFormat smf = new SimpleDateFormat("dd.MM.yyyy");
    ModelTabelePolasci mtp = new ModelTabelePolasci();
    ModelTabeleRezervacija mtr = new ModelTabeleRezervacija();
    ArrayList<Rezervacija> listaRezervacija = new ArrayList<>();
    ArrayList<MedjuStanica> listaMedjustanica = new ArrayList<>();
    public static int BROJ_PRIKAZA = 0;
    public static int DUGME = 0;

    /**
     * Creates new form FormaRezervacije
     */
    public FormaRezervacije() {
        initComponents();
        this.setSize(1560, 564);
        centrirajFrame();
        postaviVelicinuPanela(1560, 570);
        panelMojeRezervacije.setVisible(false);
        panelKlijenta.setVisible(false);
        srediDaneMeseceGodinu();
        ulepsajTabelu(tablePolasci);
        ulepsajTabelu(tabelMojeRezeravacije);
        srediTabelu();
        ucitajStanice();
        ucitajMedjustanice();
        pretraziZaDatumPolaske(new Date());

        s.sat(lblSat);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRezervacija = new javax.swing.JButton();
        btnKlijent = new javax.swing.JButton();
        btnMojeRezervacije = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        lblSat = new javax.swing.JLabel();
        btnOdjaviSe = new javax.swing.JButton();
        panelRezervacije = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbPocetnaStanica = new javax.swing.JComboBox();
        cmbKrajnjaStanica = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        btnPretraziPolaske = new javax.swing.JButton();
        cmbGodina = new javax.swing.JComboBox();
        cmbMeseci = new javax.swing.JComboBox();
        cmbDani = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePolasci = new javax.swing.JTable();
        lblNazivTabele = new javax.swing.JLabel();
        btnRezervisi = new javax.swing.JButton();
        cmbViseOPolasku = new javax.swing.JButton();
        btnSviPolasciDUGME = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnRefreshTabela = new javax.swing.JButton();
        panelMojeRezervacije = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelMojeRezeravacije = new javax.swing.JTable();
        lblNazivTabeleMojeRezervacije = new javax.swing.JLabel();
        cmbAktivneRezervacije = new javax.swing.JButton();
        btnRealizovaneRezervacije = new javax.swing.JButton();
        btnOtkaziRezervaciju = new javax.swing.JButton();
        panelKlijenta = new javax.swing.JPanel();
        lblEmailRegistracija = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblImeRegistracija = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        lblPrezimeRegistracija = new javax.swing.JLabel();
        txtPrezime = new javax.swing.JTextField();
        lblKorisnickoImeRegistracija = new javax.swing.JLabel();
        txtKorisnickoIme = new javax.swing.JTextField();
        lblLozinakRegistracija = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblPotvrdaLozinkeRegistracija = new javax.swing.JLabel();
        txtPasswordPotvrda = new javax.swing.JPasswordField();
        btnPromeni = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        btnRezervacija.setBackground(new java.awt.Color(34, 40, 44));
        btnRezervacija.setForeground(java.awt.Color.white);
        btnRezervacija.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_ticket_purchase_32px.png"))); // NOI18N
        btnRezervacija.setText("Rezervacija");
        btnRezervacija.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRezervacijaActionPerformed(evt);
            }
        });
        getContentPane().add(btnRezervacija);
        btnRezervacija.setBounds(0, 0, 140, 40);

        btnKlijent.setBackground(new java.awt.Color(34, 40, 44));
        btnKlijent.setForeground(java.awt.Color.white);
        btnKlijent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_user_male_30px.png"))); // NOI18N
        btnKlijent.setText("Nalog");
        btnKlijent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKlijentActionPerformed(evt);
            }
        });
        getContentPane().add(btnKlijent);
        btnKlijent.setBounds(130, 0, 160, 40);

        btnMojeRezervacije.setBackground(new java.awt.Color(34, 40, 44));
        btnMojeRezervacije.setForeground(java.awt.Color.white);
        btnMojeRezervacije.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_filing_cabinet_32px.png"))); // NOI18N
        btnMojeRezervacije.setText("Moje rezervacije");
        btnMojeRezervacije.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMojeRezervacijeActionPerformed(evt);
            }
        });
        getContentPane().add(btnMojeRezervacije);
        btnMojeRezervacije.setBounds(280, 0, 200, 40);

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(java.awt.Color.white);
        jSeparator1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 40, 1540, 20);

        lblSat.setBackground(new java.awt.Color(34, 40, 44));
        lblSat.setForeground(java.awt.Color.white);
        lblSat.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_schedule_32px.png"))); // NOI18N
        getContentPane().add(lblSat);
        lblSat.setBounds(921, 0, 440, 40);

        btnOdjaviSe.setBackground(new java.awt.Color(34, 40, 44));
        btnOdjaviSe.setForeground(java.awt.Color.white);
        btnOdjaviSe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_logout_rounded_down_32px.png"))); // NOI18N
        btnOdjaviSe.setText("Odjavi se");
        btnOdjaviSe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdjaviSeActionPerformed(evt);
            }
        });
        getContentPane().add(btnOdjaviSe);
        btnOdjaviSe.setBounds(1380, 0, 160, 40);

        panelRezervacije.setBackground(new java.awt.Color(44, 44, 44));
        panelRezervacije.setForeground(new java.awt.Color(255, 255, 255));
        panelRezervacije.setLayout(null);

        jLabel3.setBackground(new java.awt.Color(34, 40, 44));
        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_marker_32px.png"))); // NOI18N
        jLabel3.setText("Do:");
        panelRezervacije.add(jLabel3);
        jLabel3.setBounds(10, 200, 60, 30);

        jLabel4.setBackground(new java.awt.Color(34, 40, 44));
        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_marker_32px.png"))); // NOI18N
        jLabel4.setText("Od:");
        panelRezervacije.add(jLabel4);
        jLabel4.setBounds(10, 150, 60, 30);

        cmbPocetnaStanica.setBackground(new java.awt.Color(34, 40, 44));
        cmbPocetnaStanica.setForeground(java.awt.Color.white);
        panelRezervacije.add(cmbPocetnaStanica);
        cmbPocetnaStanica.setBounds(80, 150, 300, 26);

        cmbKrajnjaStanica.setBackground(new java.awt.Color(34, 40, 44));
        cmbKrajnjaStanica.setForeground(java.awt.Color.white);
        cmbKrajnjaStanica.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        cmbKrajnjaStanica.setSelectedIndex(-1);
        cmbKrajnjaStanica.setToolTipText("");
        panelRezervacije.add(cmbKrajnjaStanica);
        cmbKrajnjaStanica.setBounds(80, 210, 300, 26);

        jLabel5.setBackground(new java.awt.Color(34, 40, 44));
        jLabel5.setForeground(java.awt.Color.white);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_schedule_32px.png"))); // NOI18N
        jLabel5.setText("Datum");
        panelRezervacije.add(jLabel5);
        jLabel5.setBounds(0, 250, 80, 30);

        btnPretraziPolaske.setBackground(new java.awt.Color(34, 40, 44));
        btnPretraziPolaske.setForeground(java.awt.Color.white);
        btnPretraziPolaske.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_search_32px.png"))); // NOI18N
        btnPretraziPolaske.setText("PRETRAZI POLASKE");
        btnPretraziPolaske.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPretraziPolaskeActionPerformed(evt);
            }
        });
        panelRezervacije.add(btnPretraziPolaske);
        btnPretraziPolaske.setBounds(10, 290, 370, 40);

        cmbGodina.setBackground(new java.awt.Color(34, 40, 44));
        cmbGodina.setForeground(java.awt.Color.white);
        cmbGodina.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbGodina.setSelectedIndex(-1);
        cmbGodina.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGodinaItemStateChanged(evt);
            }
        });
        panelRezervacije.add(cmbGodina);
        cmbGodina.setBounds(300, 250, 80, 26);

        cmbMeseci.setBackground(new java.awt.Color(34, 40, 44));
        cmbMeseci.setForeground(java.awt.Color.white);
        cmbMeseci.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar" }));
        cmbMeseci.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMeseciItemStateChanged(evt);
            }
        });
        panelRezervacije.add(cmbMeseci);
        cmbMeseci.setBounds(170, 250, 120, 26);

        cmbDani.setBackground(new java.awt.Color(34, 40, 44));
        cmbDani.setForeground(java.awt.Color.white);
        cmbDani.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDani.setSelectedIndex(-1);
        panelRezervacije.add(cmbDani);
        cmbDani.setBounds(80, 250, 80, 26);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tablePolasci.setBackground(new java.awt.Color(44, 44, 44));
        tablePolasci.setForeground(new java.awt.Color(255, 255, 255));
        tablePolasci.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablePolasci.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tablePolasci.setShowVerticalLines(false);
        tablePolasci.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablePolasci);

        panelRezervacije.add(jScrollPane2);
        jScrollPane2.setBounds(400, 130, 1140, 280);

        lblNazivTabele.setBackground(new java.awt.Color(34, 40, 44));
        lblNazivTabele.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblNazivTabele.setForeground(java.awt.Color.white);
        panelRezervacije.add(lblNazivTabele);
        lblNazivTabele.setBounds(140, 40, 1090, 40);

        btnRezervisi.setBackground(new java.awt.Color(34, 40, 44));
        btnRezervisi.setForeground(java.awt.Color.white);
        btnRezervisi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_reservation_32px.png"))); // NOI18N
        btnRezervisi.setText("REZERVISI POLAZAK");
        btnRezervisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRezervisiActionPerformed(evt);
            }
        });
        panelRezervacije.add(btnRezervisi);
        btnRezervisi.setBounds(400, 420, 1140, 48);

        cmbViseOPolasku.setBackground(new java.awt.Color(34, 40, 44));
        cmbViseOPolasku.setForeground(java.awt.Color.white);
        cmbViseOPolasku.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_information_32px.png"))); // NOI18N
        cmbViseOPolasku.setText("Vise informacija");
        cmbViseOPolasku.setToolTipText("");
        cmbViseOPolasku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbViseOPolaskuActionPerformed(evt);
            }
        });
        panelRezervacije.add(cmbViseOPolasku);
        cmbViseOPolasku.setBounds(1380, 80, 160, 40);

        btnSviPolasciDUGME.setBackground(new java.awt.Color(34, 40, 44));
        btnSviPolasciDUGME.setForeground(java.awt.Color.white);
        btnSviPolasciDUGME.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_schedule_32px.png"))); // NOI18N
        btnSviPolasciDUGME.setText("Danasnji polasci");
        btnSviPolasciDUGME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSviPolasciDUGMEActionPerformed(evt);
            }
        });
        panelRezervacije.add(btnSviPolasciDUGME);
        btnSviPolasciDUGME.setBounds(1200, 80, 170, 40);

        jLabel2.setBackground(new java.awt.Color(34, 40, 44));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_search_32px.png"))); // NOI18N
        jLabel2.setText("Pretraga:");
        panelRezervacije.add(jLabel2);
        jLabel2.setBounds(10, 40, 130, 40);

        btnRefreshTabela.setBackground(new java.awt.Color(34, 40, 44));
        btnRefreshTabela.setForeground(java.awt.Color.white);
        btnRefreshTabela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_refresh_32px_1.png"))); // NOI18N
        btnRefreshTabela.setText("Osvezi tabelu");
        btnRefreshTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTabelaActionPerformed(evt);
            }
        });
        panelRezervacije.add(btnRefreshTabela);
        btnRefreshTabela.setBounds(1040, 80, 150, 40);

        getContentPane().add(panelRezervacije);
        panelRezervacije.setBounds(0, 0, 1560, 570);

        panelMojeRezervacije.setBackground(new java.awt.Color(44, 44, 44));
        panelMojeRezervacije.setForeground(new java.awt.Color(255, 255, 255));
        panelMojeRezervacije.setMinimumSize(new java.awt.Dimension(1250, 570));
        panelMojeRezervacije.setPreferredSize(new java.awt.Dimension(1250, 570));
        panelMojeRezervacije.setRequestFocusEnabled(false);
        panelMojeRezervacije.setLayout(null);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(java.awt.Color.white);

        tabelMojeRezeravacije.setForeground(new java.awt.Color(0, 0, 0));
        tabelMojeRezeravacije.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelMojeRezeravacije.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabelMojeRezeravacije.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tabelMojeRezeravacije.setShowVerticalLines(false);
        tabelMojeRezeravacije.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelMojeRezeravacije);

        panelMojeRezervacije.add(jScrollPane1);
        jScrollPane1.setBounds(20, 160, 1510, 220);

        lblNazivTabeleMojeRezervacije.setBackground(new java.awt.Color(34, 40, 44));
        lblNazivTabeleMojeRezervacije.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblNazivTabeleMojeRezervacije.setForeground(java.awt.Color.white);
        lblNazivTabeleMojeRezervacije.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNazivTabeleMojeRezervacije.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_list_32px.png"))); // NOI18N
        lblNazivTabeleMojeRezervacije.setText("Tabela rezervacija:");
        panelMojeRezervacije.add(lblNazivTabeleMojeRezervacije);
        lblNazivTabeleMojeRezervacije.setBounds(20, 110, 1190, 40);

        cmbAktivneRezervacije.setBackground(new java.awt.Color(34, 40, 44));
        cmbAktivneRezervacije.setForeground(java.awt.Color.white);
        cmbAktivneRezervacije.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_sand_watch_32px.png"))); // NOI18N
        cmbAktivneRezervacije.setText("Aktivne rezervacije");
        cmbAktivneRezervacije.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAktivneRezervacijeActionPerformed(evt);
            }
        });
        panelMojeRezervacije.add(cmbAktivneRezervacije);
        cmbAktivneRezervacije.setBounds(1110, 60, 230, 50);

        btnRealizovaneRezervacije.setBackground(new java.awt.Color(34, 40, 44));
        btnRealizovaneRezervacije.setForeground(java.awt.Color.white);
        btnRealizovaneRezervacije.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_checked_checkbox_30px.png"))); // NOI18N
        btnRealizovaneRezervacije.setText("Realizovane rezervacije");
        btnRealizovaneRezervacije.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizovaneRezervacijeActionPerformed(evt);
            }
        });
        panelMojeRezervacije.add(btnRealizovaneRezervacije);
        btnRealizovaneRezervacije.setBounds(1330, 60, 210, 50);

        btnOtkaziRezervaciju.setBackground(new java.awt.Color(34, 40, 44));
        btnOtkaziRezervaciju.setForeground(java.awt.Color.white);
        btnOtkaziRezervaciju.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_waste_32px.png"))); // NOI18N
        btnOtkaziRezervaciju.setText("Oktazi rezervaciju");
        btnOtkaziRezervaciju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziRezervacijuActionPerformed(evt);
            }
        });
        panelMojeRezervacije.add(btnOtkaziRezervaciju);
        btnOtkaziRezervaciju.setBounds(1230, 390, 310, 40);

        getContentPane().add(panelMojeRezervacije);
        panelMojeRezervacije.setBounds(0, 0, 1560, 570);

        panelKlijenta.setBackground(new java.awt.Color(44, 44, 44));
        panelKlijenta.setForeground(new java.awt.Color(255, 255, 255));
        panelKlijenta.setLayout(null);

        lblEmailRegistracija.setBackground(new java.awt.Color(34, 40, 44));
        lblEmailRegistracija.setForeground(java.awt.Color.white);
        lblEmailRegistracija.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_gmail_32px.png"))); // NOI18N
        lblEmailRegistracija.setText("Email:");
        panelKlijenta.add(lblEmailRegistracija);
        lblEmailRegistracija.setBounds(130, 100, 140, 30);

        txtEmail.setBackground(new java.awt.Color(44, 44, 44));
        txtEmail.setForeground(java.awt.Color.white);
        panelKlijenta.add(txtEmail);
        txtEmail.setBounds(280, 100, 218, 30);

        lblImeRegistracija.setBackground(new java.awt.Color(34, 40, 44));
        lblImeRegistracija.setForeground(java.awt.Color.white);
        lblImeRegistracija.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_account_32px.png"))); // NOI18N
        lblImeRegistracija.setText("Ime:");
        panelKlijenta.add(lblImeRegistracija);
        lblImeRegistracija.setBounds(130, 140, 140, 30);

        txtIme.setBackground(new java.awt.Color(44, 44, 44));
        txtIme.setForeground(java.awt.Color.white);
        panelKlijenta.add(txtIme);
        txtIme.setBounds(280, 140, 218, 30);

        lblPrezimeRegistracija.setBackground(new java.awt.Color(34, 40, 44));
        lblPrezimeRegistracija.setForeground(java.awt.Color.white);
        lblPrezimeRegistracija.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_account_32px.png"))); // NOI18N
        lblPrezimeRegistracija.setText("Prezime:");
        panelKlijenta.add(lblPrezimeRegistracija);
        lblPrezimeRegistracija.setBounds(130, 180, 140, 30);

        txtPrezime.setBackground(new java.awt.Color(44, 44, 44));
        txtPrezime.setForeground(java.awt.Color.white);
        panelKlijenta.add(txtPrezime);
        txtPrezime.setBounds(280, 180, 218, 30);

        lblKorisnickoImeRegistracija.setBackground(new java.awt.Color(34, 40, 44));
        lblKorisnickoImeRegistracija.setForeground(java.awt.Color.white);
        lblKorisnickoImeRegistracija.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_edit_user_32px.png"))); // NOI18N
        lblKorisnickoImeRegistracija.setText("Korisnicko ime:");
        panelKlijenta.add(lblKorisnickoImeRegistracija);
        lblKorisnickoImeRegistracija.setBounds(130, 220, 140, 30);

        txtKorisnickoIme.setBackground(new java.awt.Color(44, 44, 44));
        txtKorisnickoIme.setForeground(java.awt.Color.white);
        panelKlijenta.add(txtKorisnickoIme);
        txtKorisnickoIme.setBounds(280, 220, 218, 30);

        lblLozinakRegistracija.setBackground(new java.awt.Color(34, 40, 44));
        lblLozinakRegistracija.setForeground(java.awt.Color.white);
        lblLozinakRegistracija.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_key_32px_1.png"))); // NOI18N
        lblLozinakRegistracija.setText("Lozinka:");
        panelKlijenta.add(lblLozinakRegistracija);
        lblLozinakRegistracija.setBounds(130, 260, 140, 30);

        txtPassword.setBackground(new java.awt.Color(44, 44, 44));
        txtPassword.setForeground(java.awt.Color.white);
        panelKlijenta.add(txtPassword);
        txtPassword.setBounds(280, 260, 218, 30);

        lblPotvrdaLozinkeRegistracija.setBackground(new java.awt.Color(34, 40, 44));
        lblPotvrdaLozinkeRegistracija.setForeground(java.awt.Color.white);
        lblPotvrdaLozinkeRegistracija.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_key_32px_1.png"))); // NOI18N
        lblPotvrdaLozinkeRegistracija.setText("Potvrda loznike:");
        panelKlijenta.add(lblPotvrdaLozinkeRegistracija);
        lblPotvrdaLozinkeRegistracija.setBounds(130, 300, 140, 30);

        txtPasswordPotvrda.setBackground(new java.awt.Color(44, 44, 44));
        txtPasswordPotvrda.setForeground(java.awt.Color.white);
        panelKlijenta.add(txtPasswordPotvrda);
        txtPasswordPotvrda.setBounds(280, 300, 218, 30);

        btnPromeni.setBackground(new java.awt.Color(34, 40, 44));
        btnPromeni.setForeground(java.awt.Color.white);
        btnPromeni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_edit_user_32px.png"))); // NOI18N
        btnPromeni.setText("Promeni");
        btnPromeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromeniActionPerformed(evt);
            }
        });
        panelKlijenta.add(btnPromeni);
        btnPromeni.setBounds(280, 342, 218, 40);

        getContentPane().add(panelKlijenta);
        panelKlijenta.setBounds(0, 0, 1560, 570);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPretraziPolaskeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPretraziPolaskeActionPerformed
        DUGME = 1;
        pretraziPolaskeZaDatum();
    }//GEN-LAST:event_btnPretraziPolaskeActionPerformed

    private void cmbGodinaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGodinaItemStateChanged
        int godina = (int) cmbGodina.getSelectedItem();
        postaviZaPrestupnuGodinu(godina);
    }//GEN-LAST:event_cmbGodinaItemStateChanged

    private void cmbMeseciItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMeseciItemStateChanged
        int index = cmbMeseci.getSelectedIndex();
        int godina = (int) cmbGodina.getSelectedItem();
        postaviDaneZaOdgovarajuciMesec(index);
        postaviZaPrestupnuGodinu(godina);
    }//GEN-LAST:event_cmbMeseciItemStateChanged

    private void btnRezervisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRezervisiActionPerformed
        int red = tablePolasci.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Morate obeleziti polazak u tabeli za koji zelite da rezervisete kartu!");
            return;
        }
        Polazak p = mtp.vratiListu().get(red);
//        if (p.getNapomena() != null && (p.getNapomena().contains("OTKAZANO") || p.getNapomena().contains("Otkazano") || p.getNapomena().contains("Otkazan"))) {
//            JOptionPane.showMessageDialog(this, "Polazak je otkazan. Ne mozete ga rezervisati!");
//            return;
//        }
        //ovo moze u validaciji
//        if (p.getDatumPolaska().before(new Date())) {
//            JOptionPane.showMessageDialog(this, "Ne mozete rezervisati kartu za polazak koji je vec realizovan!");
//            return;
//        }
//        Rezervacija rez = new Rezervacija(null, p, null);
//        boolean popunjeno = mtp.popunjeno(rez);
//        if (!popunjeno) {
//            pretraziPolaskeZaDatum();
//        } else {
//            JOptionPane.showMessageDialog(this, "Popunjena su sva mesta!");
//        }
        Date d = new Date();
        Rezervacija r = new Rezervacija(k, p, d);
        try {
            Kontroler.getInstance().rezervisiPolazak(r);
            JOptionPane.showMessageDialog(this, "Uspesno ste rezervisali kartu za polazak:" + r.getPolazak().getNaziv());
            btnRefreshTabelaActionPerformed(evt);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }

    }//GEN-LAST:event_btnRezervisiActionPerformed

    private void btnMojeRezervacijeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMojeRezervacijeActionPerformed
        panelKlijenta.setVisible(false);
        panelRezervacije.setVisible(false);
        panelMojeRezervacije.setVisible(true);
        ucitajMojeRezervacije();
    }//GEN-LAST:event_btnMojeRezervacijeActionPerformed

    private void btnRezervacijaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRezervacijaActionPerformed
        panelKlijenta.setVisible(false);
        panelMojeRezervacije.setVisible(false);
        panelRezervacije.setVisible(true);
    }//GEN-LAST:event_btnRezervacijaActionPerformed

    private void btnPromeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromeniActionPerformed
        String ime = txtIme.getText();
        String prezime = txtPrezime.getText();
        String email = txtEmail.getText();
        String korisnickoIme = txtKorisnickoIme.getText();
        char[] niz = txtPassword.getPassword();
        String lozinka = String.copyValueOf(niz);
        char[] niz2 = txtPasswordPotvrda.getPassword();
        String lozinka2 = String.copyValueOf(niz2);
        if (k.getKorisnickoIme().equals(korisnickoIme) && lozinka.isEmpty() && lozinka2.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nema promena");
            return;
        }
        if (lozinka.isEmpty() && lozinka2.isEmpty()) {
            lozinka = k.getLozinka();
            lozinka2 = k.getLozinka();
        }
        if (!lozinka.equals(lozinka2)) {
            JOptionPane.showMessageDialog(this, "Niste dobro potvrdili lozinku!");
            return;
        }
        Klijent klijent = new Klijent(k.getKlijentID(), korisnickoIme, lozinka, ime, prezime, email);
        try {
            Kontroler.getInstance().IzmeniNalog(klijent);
            k = klijent;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
            return;
        } finally {
            txtPassword.setText("");
            txtPasswordPotvrda.setText("");
        }
    }//GEN-LAST:event_btnPromeniActionPerformed

    private void btnKlijentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKlijentActionPerformed
        panelKlijenta.setVisible(true);
        panelMojeRezervacije.setVisible(false);
        panelRezervacije.setVisible(false);
        txtEmail.setText(k.getEmail());
        txtIme.setText(k.getIme());
        txtPrezime.setText(k.getPrezime());
        txtKorisnickoIme.setText(k.getKorisnickoIme());
        txtEmail.setEnabled(false);
        txtIme.setEnabled(false);
        txtPrezime.setEnabled(false);
    }//GEN-LAST:event_btnKlijentActionPerformed

    private void cmbAktivneRezervacijeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAktivneRezervacijeActionPerformed
        Date datum = new Date();
        ArrayList<Rezervacija> listaAkt = new ArrayList<>();
        for (Rezervacija rezervacija : listaRezervacija) {
            if (datum.before(rezervacija.getPolazak().getDatumPolaska())) {
                listaAkt.add(rezervacija);
            }
        }
        if (!listaAkt.isEmpty()) {
            mtr.ocistiTabelu();
            mtr.setList(listaAkt);
        } else {
            mtr.ocistiTabelu();
        }
    }//GEN-LAST:event_cmbAktivneRezervacijeActionPerformed

    private void btnRealizovaneRezervacijeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizovaneRezervacijeActionPerformed
        Date datum = new Date();
        ArrayList<Rezervacija> listaRealizovanih = new ArrayList<>();
        for (Rezervacija rezervacija : listaRezervacija) {
            if (datum.after(rezervacija.getPolazak().getDatumPolaska())) {
                listaRealizovanih.add(rezervacija);
            }
        }
        if (!listaRealizovanih.isEmpty()) {
            mtr.ocistiTabelu();
            mtr.setList(listaRealizovanih);
        } else {
            mtr.ocistiTabelu();
        }

    }//GEN-LAST:event_btnRealizovaneRezervacijeActionPerformed

    private void btnOdjaviSeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdjaviSeActionPerformed
        this.setVisible(false);
        FormaLoginRegistracija flr = new FormaLoginRegistracija();
        flr.setVisible(true);
    }//GEN-LAST:event_btnOdjaviSeActionPerformed

    private void btnOtkaziRezervacijuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziRezervacijuActionPerformed
        int broj = tabelMojeRezeravacije.getSelectedRow();
        if (broj == -1) {
            JOptionPane.showMessageDialog(this, "Morate da obelezite polazak za koji zelite da otkazete rezervaciju!");
            return;
        }
        Rezervacija r = mtr.getList().get(broj);
        Date danasnji = new Date();

        //Ovo bi trebalo da ide u validaciju
        if (danasnji.after(r.getPolazak().getDatumPolaska())) {
            JOptionPane.showMessageDialog(this, "Polazak je vec realizovan!", "NEUSPESNO OTKAZIVANJE KARTE!", 1);
            return;
        }
        try {
            Kontroler.getInstance().otkaziRezervaciju(r);
            JOptionPane.showMessageDialog(this, "Uspesno ste otkazali rezervaciju!");
            mtr.izbrisiIzTabele(broj);
        } catch (Exception ex) {
            Logger.getLogger(FormaRezervacije.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOtkaziRezervacijuActionPerformed

    private void cmbViseOPolaskuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbViseOPolaskuActionPerformed
        int broj = tablePolasci.getSelectedRow();
        if (broj == -1) {
            JOptionPane.showMessageDialog(this, "Izaberite polazak za koji zelite da vidite sve medjustanice!");
            return;
        }
        Polazak p = mtp.getList().get(broj);
        MedjuStanica m = new MedjuStanica(null, p.getLinija(), 0);
        ArrayList<MedjuStanica> listaMedjustanica;
        try {
            listaMedjustanica = Kontroler.getInstance().vratiMiMedjustaniceLiniju(m);
            JOptionPane.showMessageDialog(this, ispisiListu(listaMedjustanica), "LISTA MEDJUSTANICA", 1);
        } catch (Exception ex) {
            Logger.getLogger(FormaRezervacije.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbViseOPolaskuActionPerformed

    private void btnSviPolasciDUGMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSviPolasciDUGMEActionPerformed
        DUGME = 0;
        try {
            pretraziZaDatumPolaske(new Date());
        } catch (Exception ex) {
            Logger.getLogger(FormaRezervacije.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnSviPolasciDUGMEActionPerformed

    private void btnRefreshTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTabelaActionPerformed
        if (DUGME == 0) {
            pretraziZaDatumPolaske(new Date());
        } else {
            pretraziPolaskeZaDatum();
        }
    }//GEN-LAST:event_btnRefreshTabelaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormaRezervacije.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormaRezervacije.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormaRezervacije.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormaRezervacije.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormaRezervacije().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKlijent;
    private javax.swing.JButton btnMojeRezervacije;
    private javax.swing.JButton btnOdjaviSe;
    private javax.swing.JButton btnOtkaziRezervaciju;
    private javax.swing.JButton btnPretraziPolaske;
    private javax.swing.JButton btnPromeni;
    private javax.swing.JButton btnRealizovaneRezervacije;
    private javax.swing.JButton btnRefreshTabela;
    private javax.swing.JButton btnRezervacija;
    private javax.swing.JButton btnRezervisi;
    private javax.swing.JButton btnSviPolasciDUGME;
    private javax.swing.JButton cmbAktivneRezervacije;
    private javax.swing.JComboBox cmbDani;
    private javax.swing.JComboBox cmbGodina;
    private javax.swing.JComboBox cmbKrajnjaStanica;
    private javax.swing.JComboBox cmbMeseci;
    private javax.swing.JComboBox cmbPocetnaStanica;
    private javax.swing.JButton cmbViseOPolasku;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblEmailRegistracija;
    private javax.swing.JLabel lblImeRegistracija;
    private javax.swing.JLabel lblKorisnickoImeRegistracija;
    private javax.swing.JLabel lblLozinakRegistracija;
    private javax.swing.JLabel lblNazivTabele;
    private javax.swing.JLabel lblNazivTabeleMojeRezervacije;
    private javax.swing.JLabel lblPotvrdaLozinkeRegistracija;
    private javax.swing.JLabel lblPrezimeRegistracija;
    private javax.swing.JLabel lblSat;
    private javax.swing.JPanel panelKlijenta;
    private javax.swing.JPanel panelMojeRezervacije;
    private javax.swing.JPanel panelRezervacije;
    private javax.swing.JTable tabelMojeRezeravacije;
    private javax.swing.JTable tablePolasci;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtKorisnickoIme;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtPasswordPotvrda;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables

    public Klijent getK() {
        return k;
    }

    public void setK(Klijent k) {
        this.k = k;
    }

    private void centrirajFrame() {
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
    }

    private void srediDaneMeseceGodinu() {
        cmbDani.removeAllItems();
        cmbGodina.removeAllItems();
        GregorianCalendar gc = new GregorianCalendar();
        int godina = gc.get(Calendar.YEAR);
        int mesec = gc.get(Calendar.MONTH);
        int dan = gc.get(Calendar.DAY_OF_MONTH);
        for (int i = godina; i < godina + 10; i++) {
            cmbGodina.addItem(i);
        }
        postaviDaneZaOdgovarajuciMesec(dan);
        postaviZaPrestupnuGodinu(godina);
        postaviDaneZaOdgovarajuciMesec(mesec);
        cmbGodina.setSelectedItem(godina);
        cmbMeseci.setSelectedIndex(mesec);
        cmbDani.setSelectedItem(dan);

    }

    private void postaviDaneZaOdgovarajuciMesec(int index) {
        if (index == 0 || index == 2 || index == 4 || index == 6 || index == 7 || index == 9 || index == 11) {
            cmbDani.removeAllItems();
            for (int i = 1; i <= 31; i++) {
                cmbDani.addItem(i);
            }
        }
        if (index == 3 || index == 5 || index == 8 || index == 10) {
            cmbDani.removeAllItems();
            for (int i = 1; i <= 30; i++) {
                cmbDani.addItem(i);
            }
        }
    }

    private void postaviZaPrestupnuGodinu(int godina) {
        if (cmbMeseci.getSelectedIndex() == 1) {
            if (godina % 4 == 0) {
                cmbDani.removeAllItems();
                for (int i = 1; i <= 29; i++) {
                    cmbDani.addItem(i);
                }
            } else {
                cmbDani.removeAllItems();
                for (int i = 1; i <= 28; i++) {
                    cmbDani.addItem(i);
                }
            }
        }
    }

    private void ucitajStanice() {
        cmbPocetnaStanica.removeAllItems();
        cmbKrajnjaStanica.removeAllItems();

        ArrayList<Stanica> listaStanica = new ArrayList<>();
        try {
            listaStanica = Kontroler.getInstance().vratiMiSveStanice();
        } catch (Exception ex) {
            Logger.getLogger(FormaRezervacije.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Stanica stanica : listaStanica) {
            cmbPocetnaStanica.addItem(stanica);
            cmbKrajnjaStanica.addItem(stanica);
        }

    }

    private void srediTabelu() {
        tablePolasci.setModel(mtp);
    }

    public void postaviVelicinuPanela(int x, int y) {
        panelKlijenta.setSize(x, y);
        panelMojeRezervacije.setSize(x, y);
        panelRezervacije.setSize(x, y);
    }

    public ArrayList<Rezervacija> getListaRezervacija() {
        return listaRezervacija;
    }

    public void setListaRezervacija(ArrayList<Rezervacija> listaRezervacija) {
        this.listaRezervacija = listaRezervacija;
    }

    private void ucitajMedjustanice() {
        listaMedjustanica = new ArrayList<>();
        try {
            listaMedjustanica = Kontroler.getInstance().vratiMiSveMedjustanica();
        } catch (Exception ex) {
            Logger.getLogger(FormaRezervacije.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean pocentaJeMedjustanica(Polazak polazak, Stanica pocetna, Stanica krajnja) {
        boolean postoji = false;
        if (polazak.getLinija().getStanicaKrajnja().equals(krajnja)) {
            for (MedjuStanica medjuStanica : listaMedjustanica) {
                if (medjuStanica.getStanica().equals(pocetna) && polazak.getLinija().getLinijaID() == medjuStanica.getLinija().getLinijaID()) {
                    return true;
                }
            }
        }
        return postoji;
    }

    private boolean krajnjaJeMedjustnica(Polazak polazak, Stanica krajnja, Stanica pocetna) {
        boolean postoji = false;
        if (polazak.getLinija().getStanicaPocetna().equals(pocetna)) {
            for (MedjuStanica medjuStanica : listaMedjustanica) {
                if (medjuStanica.getStanica().equals(krajnja) && polazak.getLinija().getLinijaID() == medjuStanica.getLinija().getLinijaID()) {
                    return true;
                }
            }
        }
        return postoji;
    }

    //vraca true ako se pocetna i krajnja u okviru nekog polaska a nisu ni prva ni poslednja i ako je prva pre druge
    private boolean pocetnaIKrajnjaSuMedjustanice(Polazak polazak, Stanica krajnja, Stanica pocetna) {
        boolean postojiP = false;
        boolean postojiK = false;
        MedjuStanica m1 = new MedjuStanica();
        MedjuStanica m2 = new MedjuStanica();
        for (MedjuStanica medjuStanica : listaMedjustanica) {
            if (medjuStanica.getStanica().equals(pocetna) && polazak.getLinija().getLinijaID() == medjuStanica.getLinija().getLinijaID()) {
                postojiP = true;
                m1 = medjuStanica;
                break;
            }
        }
        for (MedjuStanica medjuStanica : listaMedjustanica) {
            if (medjuStanica.getStanica().equals(krajnja) && polazak.getLinija().getLinijaID() == medjuStanica.getLinija().getLinijaID()) {
                postojiK = true;
                m2 = medjuStanica;
                break;
            }
        }
        boolean broj = false;
        if (m1.getRedniBroj() < m2.getRedniBroj()) {
            broj = true;
        }

        return postojiK && postojiP && broj;
    }

    private String ispisiListu(ArrayList<MedjuStanica> lista) {
        String listaString = "";
        for (MedjuStanica medjuStanica : lista) {
            listaString += medjuStanica.getRedniBroj() + ". ";
            listaString += medjuStanica.getStanica().getNaziv();
            listaString += "\n";
        }
        return listaString;
    }

    public void pretraziPolaskeZaDatum() {
        DUGME = 1;
        //u kalendaru meseci idu od 0 a u util datu idu od 1
        int godina = (int) cmbGodina.getSelectedItem();
        int mesec = cmbMeseci.getSelectedIndex() + 1;
        int dan = (int) cmbDani.getSelectedItem();
        Stanica pocetna = (Stanica) cmbPocetnaStanica.getSelectedItem();
        Stanica krajnja = (Stanica) cmbKrajnjaStanica.getSelectedItem();
        String datum = dan + "." + mesec + "." + godina;
        Date date = null;
        try {
            date = smf.parse(datum);
        } catch (ParseException ex) {
            Logger.getLogger(FormaRezervacije.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        Polazak p = new Polazak(-1, "", date, null, null, null);

        ArrayList<Polazak> listPolazaka = new ArrayList<>();
        try {
            listPolazaka = Kontroler.getInstance().vratiMiPolaskeZaDatum(p);
        } catch (Exception ex) {
            Logger.getLogger(FormaRezervacije.class.getName()).log(Level.SEVERE, null, ex);
        }
        ArrayList<Polazak> listaZaTabelu = new ArrayList<>();

        for (Polazak polazak : listPolazaka) {
            boolean pocentaJeMedjustanica = pocentaJeMedjustanica(polazak, pocetna, krajnja);
            boolean krajnjaJeMedjustniica = krajnjaJeMedjustnica(polazak, krajnja, pocetna);
            boolean pocetnaIKrajnjaSuMedjustanice = pocetnaIKrajnjaSuMedjustanice(polazak, krajnja, pocetna);
            if ((((polazak.getLinija().getStanicaPocetna().equals(pocetna) || pocentaJeMedjustanica) && (polazak.getLinija().getStanicaKrajnja().equals(krajnja) || krajnjaJeMedjustniica)) || pocetnaIKrajnjaSuMedjustanice)) {
                listaZaTabelu.add(polazak);
            }
        }
        mtp.ocistiTabelu();
        if (listaZaTabelu.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nema polazaka na relaciji " + pocetna.getNaziv() + " - " + krajnja.getNaziv() + " za datum: " + datum);
            lblNazivTabele.setText("Nema polazaka na relaciji " + pocetna.getNaziv() + " - " + krajnja.getNaziv() + " za datum: " + datum);
            return;
        } else {
            lblNazivTabele.setText("Lista polazaka za datum: " + datum + " na liniji: " + pocetna.getNaziv() + " - " + krajnja.getNaziv());
        }
        mtp.setList(listaZaTabelu);
        tablePolasci.setModel(mtp);
    }

    private void pretraziZaDatumPolaske(Date date) {
        Polazak p = new Polazak(-1, "", date, null, null, null);
        ArrayList<Polazak> listPolazaka = new ArrayList<>();
        try {
            listPolazaka = Kontroler.getInstance().vratiMiPolaskeZaDatum(p);
        } catch (Exception ex) {
            Logger.getLogger(FormaRezervacije.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (listPolazaka.isEmpty()) {
            lblNazivTabele.setText("Nema polazaka za datum: " + smf.format(date));
            return;
        } else {
            lblNazivTabele.setText("Svi polasci za datum: " + smf.format(date));
        }
        mtp.ocistiTabelu();
        mtp.setList(listPolazaka);
        tablePolasci.setModel(mtp);
    }

    public void ulepsajTabelu(JTable tabela) {
        tabela.setRowHeight(25);
        tabela.setFocusable(false);
        tabela.setShowVerticalLines(false);
        tabela.setSelectionBackground(Color.LIGHT_GRAY);
        tabela.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        tabela.getTableHeader().setOpaque(false);
        tabela.getTableHeader().setBackground(new Color(44, 44, 44));
        tabela.setBackground(new Color(44, 44, 44));
        tabela.setForeground(new Color(255, 255, 255));
        tabela.getTableHeader().setForeground(new Color(255, 255, 255));
        tabela.setRowHeight(25);
    }

    private void ucitajMojeRezervacije() {
        ArrayList<Rezervacija> listaRezervacija = new ArrayList<>();
        try {
            listaRezervacija = Kontroler.getInstance().vratiMojeRezervacije(new Rezervacija(k, null, null));
        } catch (Exception ex) {
            Logger.getLogger(FormaRezervacije.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (BROJ_PRIKAZA == 0) {
            if (listaRezervacija.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vasa lista rezervacija je prazna!");
            }
            BROJ_PRIKAZA++;
        }
        this.setListaRezervacija(listaRezervacija);
        mtr.setList(listaRezervacija);
        tabelMojeRezeravacije.setModel(mtr);
    }

}
